<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cosmus.resonos.mapper.TrackReviewMapper">

    <!-- ─────────────────────── TrackReview → 도메인 매핑 -->
    <resultMap id="TrackReview" type="com.cosmus.resonos.domain.TrackReview">
        <id     property="id"        column="id"/>
        <result property="rating"    column="rating"/>
        <result property="content"   column="content"/>
        <result property="blinded"   column="blinded"/>
        <result property="likes"     column="likes"/>
        <result property="dislikes"  column="dislikes"/>
        <result property="createdAt" column="created_at"/>
        <result property="critic"    column="critic"/>
        <result property="userId"    column="user_id"/>
        <result property="trackId"   column="track_id"/>
            <association property="reviewer" javaType="com.cosmus.resonos.domain.Reviewer">
                <id property="id" column="reviewer_id"/>
                <result property="nickname" column="reviewer_nickname"/>
                <result property="profileImage" column="reviewer_profile_image"/>
                <result property="pro" column="reviewer_is_pro"/>
            </association>
    </resultMap>

    <!-- ─────────────────────── TrackScore → 집계 매핑 -->
    <resultMap id="TrackScore" type="com.cosmus.resonos.domain.TrackScore">
        <id property="trackId"      column="track_id"/>
        <result property="averageScore" column="avg_score"/>
        <result property="criticCount"  column="critic_count"/>
        <result property="userCount"    column="user_count"/>
    </resultMap>

    <!-- insert -->
    <insert id="insert"  useGeneratedKeys="true" keyProperty="id">
        INSERT INTO track_review(
            rating, content, blinded, likes, dislikes, created_at, critic, user_id, track_id)
        VALUES (#{rating}, #{content}, #{blinded}, #{likes}, #{dislikes}, #{createdAt}, #{critic}, #{userId}, #{trackId})
    </insert>

    <!-- find by id -->
    <select id="findById"  resultMap="TrackReview">
        SELECT * FROM track_review WHERE id = #{id}
    </select>

    <!-- find reviews for track (blinded 제외) -->
    <select id="findByTrackId"  resultMap="TrackReview">
        SELECT *
        FROM track_review
        WHERE track_id = #{trackId}
          AND blinded = 0
        ORDER BY created_at DESC
    </select>

    <select id="reviewWithReviewerByTrackId" parameterType="string" resultMap="TrackReview">
        SELECT
            tr.id,
            tr.rating,
            tr.content,
            tr.blinded,
            tr.created_at,
            tr.critic,
            tr.user_id,
            tr.track_id,
            u.id AS reviewer_id,
            u.nickname AS reviewer_nickname,
            u.profile_image AS reviewer_profile_image,
            u.is_pro AS reviewer_is_pro,
            (SELECT COUNT(*) FROM review_like WHERE review_id = tr.id AND review_type = 'TRACK') AS likes,
            (SELECT COUNT(*) FROM review_report WHERE review_id = tr.id AND review_type = 'TRACK') AS dislikes
        FROM track_review tr
        JOIN user u ON u.id = tr.user_id
        WHERE tr.track_id = #{trackId}
        AND tr.blinded = 0
        ORDER BY tr.critic DESC,
            likes DESC,
            tr.created_at ASC
    </select>

    <select id="selectPagedReviewsWithReviewer"
            parameterType="map"
            resultMap="TrackReview">
                likes DESC,
                tr.created_at ASC
    </select>

    <!-- 특정 유저의 리뷰 정보 -->
    <select id="reviewWithReviewerByUserId" parameterType="Long" resultMap="TrackReview">
        SELECT
            tr.id,
            tr.rating,
            tr.content,
            tr.blinded,
            tr.created_at,
            tr.critic,
            tr.user_id,
            tr.track_id,
            u.id AS reviewer_id,
            u.nickname AS reviewer_nickname,
            u.profile_image AS reviewer_profile_image,
            u.is_pro AS reviewer_is_pro,
            (SELECT COUNT(*) FROM review_like WHERE review_id = tr.id AND review_type = 'TRACK') AS likes,
            (SELECT COUNT(*) FROM review_report WHERE review_id = tr.id AND review_type = 'TRACK') AS dislikes,
            t.title
        FROM track_review tr
        JOIN user u ON u.id = tr.user_id
        JOIN track t ON tr.track_id = t.id
        WHERE tr.user_id = #{loginUserId}
        ORDER BY tr.critic DESC,
                likes DESC,
                tr.created_at ASC
    </select>

    <!-- update blind status -->
    <update id="updateBlindStatus">
        UPDATE track_review SET blinded = #{blinded} WHERE id = #{id}
    </update>

    <!-- like / dislike -->
    <update id="incrementLikes">
        UPDATE track_review SET likes = likes + 1 WHERE id = #{id}
    </update>

    <update id="incrementDislikes">
        UPDATE track_review SET dislikes = dislikes + 1 WHERE id = #{id}
    </update>

    <!-- ───────── TrackScore Aggregation -->
    <select id="findScoreByTrackId"  resultMap="TrackScore">
        <![CDATA[
        SELECT  track_id,
                ROUND(AVG(rating))                         AS avg_score,
                SUM(CASE WHEN critic = 1 THEN 1 ELSE 0 END)   AS critic_count,
                SUM(CASE WHEN critic = 0 THEN 1 ELSE 0 END)   AS user_count
        FROM    track_review
        WHERE   track_id = #{trackId}
        AND   blinded = 0
        GROUP BY track_id
        ]]>
    </select>

    <update id="update">
        UPDATE track_review
        SET rating  = #{rating},
            content = #{content}
        WHERE id = #{id}
    </update>

    <delete id="delete">
        DELETE FROM track_review WHERE id = #{id}
    </delete>

    <!-- 중복 방지 -->
    <select id="existsByUserAndTrack" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM track_review
        WHERE user_id = #{userId}
        AND track_id = #{trackId}
    </select>

    <!-- 전체 리뷰 수 -->
    <select id="countByTrackId" resultType="long">
        SELECT COUNT(*) FROM track_review
        WHERE track_id = #{trackId}
        AND blinded = 0
    </select>

    <!-- 페이징된 리뷰 목록 -->
    <!-- <select id="selectPagedReviews" parameterType="map" resultMap="TrackReviewResultMap">
        SELECT * FROM track_review
        WHERE track_id = #{trackId}
        ORDER BY created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select> -->

</mapper>