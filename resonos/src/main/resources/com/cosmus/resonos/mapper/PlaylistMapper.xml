<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cosmus.resonos.mapper.PlaylistMapper">

  <resultMap id="PlaylistResultMap" type="com.cosmus.resonos.domain.Playlist">
    <id property="id" column="id"/>
    <result property="userId" column="user_id"/>
    <result property="title" column="title"/>
    <result property="description" column="description"/>
    <result property="thumbnailUrl" column="thumbnail_url"/>
    <result property="isPublic" column="is_public"/>
    <result property="createdAt" column="created_at"/>
    <result property="trackId" column="track_id"/>
  </resultMap>

  <!-- 플레이리스트 + 트랙  -->
  <resultMap id="trackOfPlaylistMap" type="PlaylistDTO">
    <id column="id" property="id"/>
    <result column="title" property="title"/>
    <result column="user_id" property="userId"/>
    <result column="description" property="description"/>
    <result column="thumbnail_url" property="thumbnailUrl"/>
    <result column="is_public" property="isPublic"/>
    <result column="created_at" property="createdAt"/>
    <result column="likeCount" property="likeCount"/>

    <collection property="trackList" ofType="Track">
      <id column="trackId" property="id"/>
      <result column="trackTitle" property="title"/>
      <result column="cover_image" property="coverImage"/>
      <result column="order_no" property="orderNo"/>
      <result column="artistName" property="artistName"/>
    </collection>
  </resultMap>

  <select id="list" resultMap="PlaylistResultMap">
    SELECT * FROM playlist ORDER BY created_at DESC
  </select>

  <select id="select" resultMap="PlaylistResultMap">
    SELECT * FROM playlist WHERE id = #{id}
  </select>

  <!-- 플레이리스트 생성 -->
  <insert id="insert" >
    INSERT INTO playlist
      (user_id, title, description, thumbnail_url, is_public)
    VALUES
      (#{userId}, #{title}, #{description}, #{thumbnailUrl}, #{isPublic})
  </insert>

  <update id="update" >
    UPDATE playlist
    SET
        title = #{title},
        description = #{description},
        thumbnail_url = #{thumbnailUrl},
        is_public = #{isPublic}
    WHERE id = #{id}
  </update>

  <!-- 플레이리스트 삭제 -->
  <delete id="delete">
    DELETE FROM playlist WHERE id = #{id}
  </delete>

  <!-- 마이페이지 플레이리스트 (3개) -->
  <select id="usersPlaylist3" resultType="Playlist">
    SELECT p.*, IFNULL(sub.like_count, 0) AS likeCount
    FROM playlist p
      LEFT JOIN (
        SELECT playlist_id, COUNT(*) AS like_count
        FROM liked_playlist
        GROUP BY playlist_id
      ) sub ON p.id = sub.playlist_id
    WHERE p.user_id = #{userId}
    ORDER BY created_at DESC
    LIMIT 3
  </select>

  <!-- 마이페이지 플레이리스트 (전체) -->
  <select id="usersPlaylist" resultType="Playlist">
    SELECT p.*, IFNULL(sub.like_count, 0) AS likeCount
    FROM playlist p
      LEFT JOIN (
        SELECT playlist_id, COUNT(*) AS like_count
        FROM liked_playlist
        GROUP BY playlist_id
      ) sub ON p.id = sub.playlist_id
    WHERE p.user_id = #{userId}
    ORDER BY created_at DESC
  </select>

  <!-- 좋아요 한 플레이리스트 -->
  <select id="likedPlaylist" resultType="Playlist">
    SELECT p.*
    FROM playlist p
      INNER JOIN liked_playlist lp ON p.id = lp.playlist_id
    WHERE lp.user_id = #{userId}
    ORDER BY lp.created_at DESC
  </select>

  <!-- 플레이리스트's 트랙 -->
  <select id="trackOfPlaylist" resultMap="trackOfPlaylistMap">
    SELECT p.*, pd.order_no, t.id AS trackId, t.title as trackTitle, a.cover_image, art.name AS artistName
    FROM playlist p
      LEFT JOIN playlist_detail pd ON p.id = pd.playlist_id
      LEFT JOIN track t ON pd.track_id = t.id
      LEFT JOIN album a ON t.album_id = a.id
      LEFT JOIN artist art ON t.artist_id = art.id
    WHERE p.id = #{id}
    ORDER BY pd.order_no;
  </select>

  <!-- 플레이리스트의 트랙 순서 바꾸기 -->
  <!-- <update id="updateTrackOrder" parameterType="map">
    <foreach collection="orderList" item="item" separator=";">
      UPDATE playlist_detail
      SET order_no = #{item.orderNo}
      WHERE playlist_id = #{playlistId}
        AND track_id = #{item.trackId}
    </foreach>
  </update> -->
  <update id="updateTrackOrder">
    UPDATE playlist_detail
    SET order_no =
    <trim prefix="CASE" suffix="END">
      <foreach collection="orderList" item="item">
        WHEN track_id = #{item.trackId} THEN #{item.orderNo}
      </foreach>
    </trim>
    WHERE playlist_id = #{playlistId}
      AND track_id IN
      <foreach collection="orderList" item="item" open="(" separator="," close=")">
        #{item.trackId}
      </foreach>
  </update>

  <!-- 플레이리스트 트랙 추가 -->
  <insert id="insertTracks" >
    INSERT INTO playlist_detail (playlist_id, track_id, order_no)
    VALUES
    <foreach collection="list" item="item" separator=",">
      (#{item.playlistId}, #{item.trackId}, #{item.orderNo})
    </foreach>
  </insert>

  <!-- 플레이리스트 트랙 삭제 -->
  <delete id="deleteTracks">
    DELETE FROM playlist_detail
    WHERE playlist_id = #{playlistId}
    AND order_no = #{orderNo}
  </delete>

  <!-- MAX 값 조회 -->
  <select id="getMaxOrderNo" resultType="int">
    SELECT COALESCE(MAX(order_no), 0)
    FROM playlist_detail
    WHERE playlist_id = #{playlistId}
  </select>

  <!-- 순서 재정렬 -->
  <update id="updateTrackOrderNo" parameterType="map">
    <foreach collection="list" item="track" separator=";">
      UPDATE playlist_detail
      SET order_no = #{track.orderNo}
      WHERE playlist_id = #{playlistId} AND track_id = #{track.id}
    </foreach>
  </update>


</mapper>
